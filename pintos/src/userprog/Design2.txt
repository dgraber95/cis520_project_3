		           +--------------------------+
				   |         CIS 520          |
		           | PROJECT 2: USER PROGRAMS |
		           |     DESIGN DOCUMENT      |
		           +--------------------------+

---- GROUP ----

>> Fill in the names of your group members.

Nolan Casimir
Alex Hamilton
Dalton Graber

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

We were influenced by Ryan Wilson's Github solution:
https://github.com/ryantimwilson/Pintos-Project-2


			   ARGUMENT PASSING
			   ================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

We did not have to add any structs, global/static variables, or typedefs to implement argument passing.

---- ALGORITHMS ----

>> A2: Briefly describe how you implemented argument parsing.  How do
>> you arrange for the elements of argv[] to be in the right order?
>> How do you avoid overflowing the stack page?

Our implementation is in the setup_stack() function in process.c. We start by initializing the stack
pointer as PHYS_BASE - 24. We then use strtok_r() to measure the offset into the command line string
for each argument and save that offset into an array (argv_offsets). We then copy the entire command
line string onto the stack (so the current memory holding it can be freed) and keep a ptr to the start
of this string in the stack. Next we align the SP to a word boundary since reading words on a word
boundary is faster. Next we start pushing the argv pointers onto the stack in reverse order. To do this,
we push the starting address of the string (in the stack) + the corresponding argv offset. Following the
argv pointers, we push a pointer to the argv array (a char **) and then argc so the function that unpacks
the stack will know how many args to extract from argv. To finalize this frame of the stack, we push a
garbage return address onto the stack.

We avoid overflowing the stack page by setting an artificial limit of 128 command line arguments.

---- RATIONALE ----

>> A3: Why does Pintos implement strtok_r() but not strtok()?

strtok_r() can be accessed by multiple threads at the same time, but strtok() cannot. strtok_r also has
an argument for save_ptr, which strtok does not have. Pintos does this because we do argument passing in 
the kernel and need to keep track of the save_ptr

>> A4: In Pintos, the kernel separates commands into an executable name
>> and arguments.  In Unix-like systems, the shell does this
>> separation.  Identify at least two advantages of the Unix approach.

1. The kernel is smaller and simpler
2. The shell can do advanced pre-processing

			     SYSTEM CALLS
			     ============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

We added the following lines to the thread struct in thread.h

    /* Project 2 Implementation */
    // NOTE: 'allelem' is used in our implementation in the limbo_list.
    // We can use this list_elem in both all_list and limbo_list b/c
    // these two lists are mutually exclussive
    int wait_cnt;                       /* Number of threads waiting on our completion */
    struct lock wait_lock;              /* wait_cnt needs to be atomic        */
    bool donezo;                        /* This process? It's DONESZO         */
    struct semaphore completion_sema;   /* Only upped once process is donezo  */
    int exit_status;                    /* Invalid until donezo == true       */
    int fd;                             /* File descriptor                    */
    struct list file_list;              /* Files in use by this thread v      */
    struct semaphore load_sema;         /* Only upped once process has loaded */
    bool load_success;                  /* Thread finished loading            */
    struct file * exe;                  /* Executable file                    */

We also added a struct called process_file. This struct is used to manage 
the files being used by any given thread. It allows us to insert the file 
into a list, and attempt to keep things atomic with a file lock.

	struct process_file
    {
    struct file* file;
    struct lock file_lock;
    int file_descriptor;
    struct list_elem elem;
    };

>> B2: Describe how file descriptors are associated with open files.
>> Are file descriptors unique within the entire OS or just within a
>> single process?
Every time we open a file, we assign the corresponding process file's
file descriptor the thread's file descriptor count and then increment
the count so that it will be unique for each file (assuming there is no 
overflow). Therefore, file descriptors are unique within a single process,
but not the entire OS. 


---- ALGORITHMS ----

>> B3: Describe your code for reading and writing user data from the
>> kernel.

---------- READING ----------
First we verify that we are not reading from stdout, and return -1 if we are. We then will check to
see if we are reading from stdin. If we are then we read through the lines in the buffer and return 
size. If we are not reading in from stdout or stdin then we aquire the file_lock, do some error
checking, call file_read, release the file lock, then return the return value of file_read. 
Throughout this process, kernel level pointers are never exposed to the user, by way of users
passing in buffers to be written to, rather than the kernel providing user code with a new, complete
buffer. 

---------- WRITING ----------
Write is very similar to read. First we verify that we are not writing to stdin, and return -1 if
we are. Then we check if we are writing to stdout. If we are, then we write the entire buffer to 
the console and return size. If we are in neither of these cases then we aquire the file_lock, do
some error checking, call file_write, release the file lock, and then return the return value
of file_write. 

>> B4: Suppose a system call causes a full page (4,096 bytes) of data
>> to be copied from user space into the kernel.  What is the least
>> and the greatest possible number of inspections of the page table
>> (e.g. calls to pagedir_get_page()) that might result?  What about
>> for a system call that only copies 2 bytes of data?  Is there room
>> for improvement in these numbers, and how much?

Every time that a page is allocated there has to be an inspection, so the minimum number is one. If we
inspected every byte then we would have 4096 inspections if each segment was one byte, which would be
the maximum. If we only copy two bytes, the minimum is still one, but the maximum becomes 2 because we
only have two bytes that we can inspect.

>> B5: Briefly describe your implementation of the "wait" system call
>> and how it interacts with process termination.

Our wait system call depends entirely on waiting within the threads system. 
First, the thread to wait double checks that the thread it wants to wait on 
1) actually exists, and 2) hasn't already completed. If the thread 
to be waited on has not completed, its completion_sema is downed (by the caller), which puts
the caller to sleep (as the semaphore is initialized to 0). When the thread to wait on completes,
that thread ups the completion_sema just prior to termination, but it's resources are not freed
until all threads that were waiting on it have completed. To accomplish this, we keep a count
(for each thread) of the number of threads waiting on it. When the thread is taken off the CPU
by schedule, schedule_tail() runs and does some cleaning up on the thread that comes off the CPU.
In this "clean up," if the number of waiters is 0, that now-done thread has its resources freed.
If there ARE waiters, we put it a list of threads in "limbo" - threads that are completely done
executing, but we still want to access it's exit code so we cannot yet free its resources.
Only once all waiting threads have woken up an retrieved the exit code, does the thread have its
resources freed.

>> B6: Any access to user program memory at a user-specified address
>> can fail due to a bad pointer value.  Such accesses must cause the
>> process to be terminated.  System calls are fraught with such
>> accesses, e.g. a "write" system call requires reading the system
>> call number from the user stack, then each of the call's three
>> arguments, then an arbitrary amount of user memory, and any of
>> these can fail at any point.  This poses a design and
>> error-handling problem: how do you best avoid obscuring the primary
>> function of code in a morass of error-handling?  Furthermore, when
>> an error is detected, how do you ensure that all temporarily
>> allocated resources (locks, buffers, etc.) are freed?  In a few
>> paragraphs, describe the strategy or strategies you adopted for
>> managing these issues.  Give an example.

In our syscall handler, we do checks on the stack pointer, and any buffers that the user
passes to us. But rather than writing a ton of error checking code, we merely do the checks
just discussed and then leave it up to the user to manage its own memory correctly. We have
a final catch-all in exception.c that terminates (with exit(-1)) any user program that
incorrectly accesses memory it should not.

---- SYNCHRONIZATION ----

>> B7: The "exec" system call returns -1 if loading the new executable
>> fails, so it cannot return before the new executable has completed
>> loading.  How does your code ensure this?  How is the load
>> success/failure status passed back to the thread that calls "exec"?

We are calling a function we created called thread_wait_for_load in thread.c that will check
the value of the bool load_success that we added in the thread struct. This bool is set by the 
return value of the load function in process.c. If load fail then we will return -1 in
thread_wait_for_load(). To ensure that sys_exec() waits for the load to complete, a semaphore
is used. We added load_sema to the thread struct and initialize it to zero. In sys_exec(), this
sema is downed immediately after calling process_execute() which puts the caller to sleep. In
process load, as soon as the load either succeeds/or fails, we up that sema so sys_exec() may
wake up and continue on with its life.

>> B8: Consider parent process P with child process C.  How do you
>> ensure proper synchronization and avoid race conditions when P
>> calls wait(C) before C exits?  After C exits?  How do you ensure
>> that all resources are freed in each case?  How about when P
>> terminates without waiting, before C exits?  After C exits?  Are
>> there any special cases?

1. We added wait_cnt, wait_lock, and completion_sema to the thread struct. The wait_lock
   ensures that we can atomically increment and decrement the wait_cnt. The completion_sema
   gives waiting threads a semaphore to sleep on.
2. If the thread has already exited, we return the exit status of that thread without waiting
   on the completion_sema (since that would be pointless).
3. If no threads are waiting on the dying thread, we immediately free its resources. If there
   exists any threads waiting on the dying thread, (i.e. wait_cnt > 0) we put the thread in
   "limbo" until all waiting processes have retrieved the exit status, which decrements 
   wait_cnt. Once wait_cnt hits zero, we remove it from the limbo_list and free the resources.
4. We did not use the "parent-child" approach. In our implementation, C's only interaction with
   P is if P waits on C. C only cares to stick around (in limbo) if there is one or more threads
   waiting on it to exit.
5. C goes into limbo if anybody is waiting. Otherwise its resources are freed immediately. The
   resources are always freed in either case.
6. If P were to attempt to wait on C AFTER C had already exited, had no waiters, and freed its
   resources, then P would not be able to. C only sticks around in limbo if there are threads
   actively waiting on it. We decided this was an acceptable implementation for this point in
   the projects.

---- RATIONALE ----

>> B9: Why did you choose to implement access to user memory from the
>> kernel in the way that you did?

It's simple and safe. It keeps the user from accessing any of our TOP SECRET data structures.
Our checks on the pointers also prevent the kernel from doing anything it shouldn't, should the
user pass in a bad ptr, malicious or not.

>> B10: What advantages or disadvantages can you see to your design
>> for file descriptors?

Advantages:
- We have a different lock for each file, so unrelated processes can access unrelated files
  without waiting on one another.
- Processes filesystem management is completely unrelated from one another (other than the underlying
  files, of course)
Disadvantages:
- It takes longer to look up the actual underlying file we are modifying because multiple
  processes could have the same FD for different files. If FDs were OS-unique, then we could
  perform very simple lookups.

>> B11: The default tid_t to pid_t mapping is the identity mapping.
>> If you changed it, what advantages are there to your approach?

We did not change it.

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

It was very hard, and I am ok with that, but it was also very time consuming. Being married,
having a job, being involved in other student organizations, and having other classes meant 
that the project took every minute of my free time and forced me to cut back time on a lot of 
other things that I value. In the future it would be nice if the projects were less time 
consuming, but I understand this class was not made to be easy. - Nolan

None of the problems themselves were incredibly difficult, the difficulty of
the project comes from the lack of instruction. We should not have to do extensive
googling to find out how to run tests correctly, let alone where to even begin on
the projects. Having the difficulty of Stanford's OS class projects without the
benefit of taking the Stanford lectures does not seem fair. - Alex

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

For me the argument passing taught me a lot about how the stack works - Nolan

I feel like I've got somewhat of a better understanding of kernel security and
an idea of some of the stupid/harmful things users can try to pull. - Dalton 

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

More guidance on how to test to see if what we did is working would be nice. - Nolan

Page 3 of the Project 2 writeup is very misleading. It seems to indicate that we need
to create a filesystem and copy the tests in manually and run them individually. In fact,
the write up says to run tests the same way as project 1. Only problem is, the project 1
write up doesn't say how to correctly run tests either! The write up for project 1 should
explain how to use "make check" to run all the tests for pass/fail credit. The project 2
write up should include instruction on how to set up pintos/src/userprog/Make.vars so that
it uses the bochs simulator and we can again use "make check" to run the tests for pass/fail
credit. - Alex

The little blip at the end of the suggested order of implementation about making process_wait
an infinite loop should not have been at the end of that list. It probably should've been the
very first thing, since arg passing won't work at all without it. Furthermore, and more
importantly, I think an instructor or TA should at least look over the project document and 
make any changes they deem necessary, instead of taking Stanford's instructions as gospel. - Dalton

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

Would be nice to talk a little bit about what we are doing in class - Nolan

>> Any other comments?
